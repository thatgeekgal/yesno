{"version":3,"sources":["Api.js","App.js","Link.react.js","serviceWorker.js","index.js"],"names":["Api","fetch","then","response","json","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","ask","askApi","answer","setState","state","react_default","a","createElement","className","type","onClick","src","image","alt","Component","STATUS","HOVERED","NORMAL","Link","_onMouseEnter","bind","assertThisInitialized","_onMouseLeave","class","href","page","onMouseEnter","onMouseLeave","children","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","Link_react_Link","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAAeA,SAAA,kBAAMC,MAAK,0BACrBC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,WC8BhBC,cA1Bb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAIVQ,IAAM,kBAAMC,IAASb,KAAK,SAAAc,GAAM,OAAIT,EAAKU,SAAS,CAAED,cAHhDT,EAAKW,MAAQ,CAAEF,OAAQ,MAFRT,wEAQf,OACIY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SACZJ,EAAAC,EAAAC,cAAA,UAAQE,KAAK,SAASC,QAASd,KAAKI,KAApC,qCAGHJ,KAAKQ,MAAMF,QACRG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,UAAKX,KAAKQ,MAAMF,OAAOA,QACvBG,EAAAC,EAAAC,cAAA,OAAKI,IAAKf,KAAKQ,MAAMF,OAAOU,MAAOC,IAAKjB,KAAKQ,MAAMF,OAAOA,kBAnB9DY,oBCDZC,EAAS,CACXC,QAAS,UACTC,OAAQ,UAGSC,cACjB,SAAAA,EAAY1B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsB,IACfzB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwB,GAAAnB,KAAAH,KAAMJ,KAED2B,cAAgB1B,EAAK0B,cAAcC,KAAnB1B,OAAA2B,EAAA,EAAA3B,QAAA2B,EAAA,EAAA3B,CAAAD,KACrBA,EAAK6B,cAAgB7B,EAAK6B,cAAcF,KAAnB1B,OAAA2B,EAAA,EAAA3B,QAAA2B,EAAA,EAAA3B,CAAAD,KAErBA,EAAKW,MAAQ,CACTmB,MAAOR,EAAOE,QAPHxB,+EAYfG,KAAKO,SAAS,CAACoB,MAAOR,EAAOC,kDAI7BpB,KAAKO,SAAS,CAACoB,MAAOR,EAAOE,0CAI7B,OACIZ,EAAAC,EAAAC,cAAA,KACIC,UAAWZ,KAAKQ,MAAMmB,MACtBC,KAAM5B,KAAKJ,MAAMiC,MAAQ,IACzBC,aAAc9B,KAAKuB,cACnBQ,aAAc/B,KAAK0B,eAEtB1B,KAAKJ,MAAMoC,iBA5BUC,IAAMf,WCIpBgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SACjDJ,IAASC,OAAO/B,EAAAC,EAAAC,cAACiC,EAAD,CAAMf,KAAK,2BAAX,YAAsDa,SAASC,eAAe,gBDqHxF,kBAAmBE,WACrBA,UAAUC,cAAcC,MAAMvD,KAAK,SAAAwD,GACjCA,EAAaC","file":"static/js/main.d76b7a5c.chunk.js","sourcesContent":["export default () => fetch(`https://yesno.wtf/api/`)\n    .then(response => response.json());","import React, { Component } from 'react';\nimport './App.css';\nimport askApi from './Api';\n\nclass App extends Component {\n  constructor(props) {\n      super(props);\n      this.state = { answer: null };\n  }\n\n  ask = () => askApi().then(answer => this.setState({ answer }));\n\n  render() {\n      return (\n          <div className=\"App\">\n              <div className=\"question\">\n                  <input type=\"text\" />\n                  <button type=\"submit\" onClick={this.ask}>Ask to the Gods of the Internet!</button>\n              </div>\n\n              {this.state.answer && (\n                  <div className=\"answer\">\n                      <h1>{this.state.answer.answer}</h1>\n                      <img src={this.state.answer.image} alt={this.state.answer.answer} />\n                  </div>\n              )}\n          </div>\n      );\n  }\n}\n\nexport default App;","// Link.react.js\nimport React from 'react';\n\nconst STATUS = {\n    HOVERED: 'hovered',\n    NORMAL: 'normal',\n};\n\nexport default class Link extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this._onMouseEnter = this._onMouseEnter.bind(this);\n        this._onMouseLeave = this._onMouseLeave.bind(this);\n\n        this.state = {\n            class: STATUS.NORMAL,\n        };\n    }\n\n    _onMouseEnter() {\n        this.setState({class: STATUS.HOVERED});\n    }\n\n    _onMouseLeave() {\n        this.setState({class: STATUS.NORMAL});\n    }\n\n    render() {\n        return (\n            <a\n                className={this.state.class}\n                href={this.props.page || '#'}\n                onMouseEnter={this._onMouseEnter}\n                onMouseLeave={this._onMouseLeave}\n            >\n            {this.props.children}\n            </a>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Link from './Link.react';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Link page=\"http://www.facebook.com\">Facebook</Link>, document.getElementById('custom-link'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}